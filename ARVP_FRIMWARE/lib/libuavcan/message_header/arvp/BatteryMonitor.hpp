/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: C:\Users\tstro\Documents\PlatformIO\Projects\ARVP_FRIMWARE\lib\dsdl\arvp\272.BatteryMonitor.uavcan
 */

#ifndef ARVP_BATTERYMONITOR_HPP_INCLUDED
#define ARVP_BATTERYMONITOR_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
float64 busVoltage   # [Volt]
float64 shuntVoltage # [milliVolt]
float64 current      # [milliAmpere]
float64 averagePower # [Watt]
******************************************************************************/

/********************* DSDL signature source definition ***********************
arvp.BatteryMonitor
saturated float64 busVoltage
saturated float64 shuntVoltage
saturated float64 current
saturated float64 averagePower
******************************************************************************/

#undef busVoltage
#undef shuntVoltage
#undef current
#undef averagePower

namespace arvp
{

template <int _tmpl>
struct UAVCAN_EXPORT BatteryMonitor_
{
    typedef const BatteryMonitor_<_tmpl>& ParameterType;
    typedef BatteryMonitor_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::FloatSpec< 64, ::uavcan::CastModeSaturate > busVoltage;
        typedef ::uavcan::FloatSpec< 64, ::uavcan::CastModeSaturate > shuntVoltage;
        typedef ::uavcan::FloatSpec< 64, ::uavcan::CastModeSaturate > current;
        typedef ::uavcan::FloatSpec< 64, ::uavcan::CastModeSaturate > averagePower;
    };

    enum
    {
        MinBitLen
            = FieldTypes::busVoltage::MinBitLen
            + FieldTypes::shuntVoltage::MinBitLen
            + FieldTypes::current::MinBitLen
            + FieldTypes::averagePower::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::busVoltage::MaxBitLen
            + FieldTypes::shuntVoltage::MaxBitLen
            + FieldTypes::current::MaxBitLen
            + FieldTypes::averagePower::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::busVoltage >::Type busVoltage;
    typename ::uavcan::StorageType< typename FieldTypes::shuntVoltage >::Type shuntVoltage;
    typename ::uavcan::StorageType< typename FieldTypes::current >::Type current;
    typename ::uavcan::StorageType< typename FieldTypes::averagePower >::Type averagePower;

    BatteryMonitor_()
        : busVoltage()
        , shuntVoltage()
        , current()
        , averagePower()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<256 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 272 };

    static const char* getDataTypeFullName()
    {
        return "arvp.BatteryMonitor";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool BatteryMonitor_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        busVoltage == rhs.busVoltage &&
        shuntVoltage == rhs.shuntVoltage &&
        current == rhs.current &&
        averagePower == rhs.averagePower;
}

template <int _tmpl>
bool BatteryMonitor_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(busVoltage, rhs.busVoltage) &&
        ::uavcan::areClose(shuntVoltage, rhs.shuntVoltage) &&
        ::uavcan::areClose(current, rhs.current) &&
        ::uavcan::areClose(averagePower, rhs.averagePower);
}

template <int _tmpl>
int BatteryMonitor_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::busVoltage::encode(self.busVoltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::shuntVoltage::encode(self.shuntVoltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::encode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::averagePower::encode(self.averagePower, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int BatteryMonitor_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::busVoltage::decode(self.busVoltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::shuntVoltage::decode(self.shuntVoltage, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::current::decode(self.current, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::averagePower::decode(self.averagePower, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature BatteryMonitor_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x7F5C16ACE50686DCULL);

    FieldTypes::busVoltage::extendDataTypeSignature(signature);
    FieldTypes::shuntVoltage::extendDataTypeSignature(signature);
    FieldTypes::current::extendDataTypeSignature(signature);
    FieldTypes::averagePower::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef BatteryMonitor_<0> BatteryMonitor;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::arvp::BatteryMonitor > _uavcan_gdtr_registrator_BatteryMonitor;

}

} // Namespace arvp

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::arvp::BatteryMonitor >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::arvp::BatteryMonitor::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::arvp::BatteryMonitor >::stream(Stream& s, ::arvp::BatteryMonitor::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "busVoltage: ";
    YamlStreamer< ::arvp::BatteryMonitor::FieldTypes::busVoltage >::stream(s, obj.busVoltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "shuntVoltage: ";
    YamlStreamer< ::arvp::BatteryMonitor::FieldTypes::shuntVoltage >::stream(s, obj.shuntVoltage, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "current: ";
    YamlStreamer< ::arvp::BatteryMonitor::FieldTypes::current >::stream(s, obj.current, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "averagePower: ";
    YamlStreamer< ::arvp::BatteryMonitor::FieldTypes::averagePower >::stream(s, obj.averagePower, level + 1);
}

}

namespace arvp
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::arvp::BatteryMonitor::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::arvp::BatteryMonitor >::stream(s, obj, 0);
    return s;
}

} // Namespace arvp

#endif // ARVP_BATTERYMONITOR_HPP_INCLUDED